0---    Configurer les informations de l'utilisateur pour tous les dépots locaux

gh version 
a. git config --global user.name "nom"
        - Exemple: git config --global user.name "Johnny Piette"
    b. git config --global user.email "adresse email"
        Exemple: git config --global user.email "johnny.piette@gmail.com"
Vérification de la configuration de git globale.
git config --global --list
Pour supprimer une entrée de notre configuration globale, on utilise: git config --unset --global user.name (Ici ça va supprimer notre prénom et nom).



Dépôts de chaque stagiaire:

BLINDCODE4DATA
Alain   (alduf1972)     : https://github.com/alduf1972/
Bruno   (BrunoDefalque) : https://github.com/BrunoDefalque/
Isaac   (zackakyo)      : https://github.com/zackakyo/JeuPython.py
Mahsum  (Mahsum21)      : https://github.com/Mahsum21/
Jessie  (jessiebak)     : https://github.com/jessiebak/
Maxime  (maximeborsen)  : https://github.com/maximeborsen/
Eleonor (ele-sana)      : https://github.com/ele-sana/
Philip  (Kraktu)        : https://github.com/Kraktu/

BLINDCODE
Bruno   (BrunoDefalque) : https://github.com/BrunoDefalque/
Isaac   (zackakyo)      : https://github.com/zackakyo/
Simon
Ibrahim
Yves
Mounir
Sophie

Johnny  (ZamBoyle)      : https://github.com/ZamBoyle/


I--- Pour accéder à la liste des dépôts distants d'Isaac zackakyo:
    gh repo list zackakyo

II-- Créer un dépôt python pour le cours de Philip:
    1. Allez dans le répertoire d'exercices python.
    2. Faites git init
    3. Faites un git status                                 pour voir l'ensemble des modifications à ajouter à la zone d'index.
    4. Faites git add .                                     (le point reprend tous les répertoires/fichiers et les sous-répertoires)
    5. Faites git commit -m "Initial commit"
    6. gh repo create ExercicesPython --public --confirm 
    7. Faites git push -u origin master 

III--- OPERATIONS APRES UPDATE ( pour faire une mise à jour sur le dépot distant...)
a. git status                           (observez ce que donne la sortie de cette commande).
c. git diff ex1_git.py                  (Observez bien les ajouts et modifications de votre programme).
d. git add ex1_git.py                   Ajoutez ce fichier à la zone d'index:
git reset genius.py                     Pour désindexer un fichier on utilise la commande 
e. git commit -m "Initial Commit"       Commitez vos changements avec le message suivant "Initial Commit": 
g. git tag v1                         Donnez un tag à ce commit. (v1)
 git tag -d v1                    Pour supprimer un tag, on utilise la commande
i. git push -u origin master            Envoyez vos modifications en ligne: 


Iv---   git clone et git pull

    1-  git clone https://github.com/Mahsum21/mypython.git mypythonMahsum    allons cloner notre dépot mypython en mypythonClone.
    2-  git pull                                effectue une mise à jour du repertoire dans lequel on se trouve


V---    Voyage dans l'historique d'un dépot--
    
    1. git log                                                       (SHA1, modifications, commentaire, auteur, date, parents)
2. git show SHA-1                                                   (Pour un commit ayant ce SHA-1). Certains auront peut-être des problèmes pour copier/coller le SHA1. Ce n'est pas grave car nous avons tagué/nommé nos commits:v1, v2, v3.
3. git show v1
4. git show v2
5. git show v3
3. git show master                                                  (montre les dernières modifications du commit avec le tag master)
    2.git checkout SHA-1 ou un tag                                  (nous nous sommes déplacés sur un commit, nous avons remonté le temps) [Musique de Retour vers le Futur]
    5. git checkout master                                          (on revient sur le dernier commit appelé master).
    2. git checkout SHA-1 ou un tag                                 (nous nous sommes déplacés sur un commit, nous avons remonté le temps) [Musique de Retour vers le Futur]


VI---   Les tags

VII---  La commande gh 

gh                                  vous affichera son menu d'aide et ses différents paramètres. Il faut voir gh comme un ensemble de commandes différentes que l'on appelle via des paramètres.
gh repo                         pour la gestion des repos
gh gist                         pour la gestion des gists
gh issue                        pour la gestion des issues (problèmes rencontrés, demande d'amélioration, etc)
gh pr                           pour la gestion des pull requests 
gh auth                         qui permet l'authentification
